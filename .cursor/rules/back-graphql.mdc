---
description: [Back] Graphql best practice
globs: **/graphql/*.ts
alwaysApply: false
---
# MDC Rules for GraphQl
## General Rules
- You **MUST NEVER** add typing definition in `resolvers.ts` inside `export const resolvers: Resolvers = { /* here */ }`, the type is already defined by `import type { Resolvers } from '../../api/__generated__/types'` that's why when writing in `resolvers.ts` you **MUST** run `bun graphql:gen` to update the generated types used by `resolvers.ts`


## Development Lifecycle Process
When developing validators, **YOU MUST FOLLOW** this step-by-step process:
1. **Analyze all `**/graphql/typedefs.ts`**: Analyze all graphql type definition to understand the domain and all scalars you will need. Focus on `util/graphql/typedefs.ts` where you will find some generic type.
2. **Analyze types.ts of the domain**: Review the `types.ts` file to identify which types need validators
3. **Create or Update `typedefs.ts`**: Implement scalar, type, query and mutation following the definition below
4. **Generate**: After updating the typedefs and before creating or updating `resolvers.ts`, Cursor will automatically run `bun graphql:gen` to update the generated types used by `resolvers.ts`
5. **Create or Update `resolvers.ts`**: Implement resolvers following the resolvers definition
6. **Type Check and Fix Issues**: Cursor will automatically run `bun tsc` to execute type checking when you save a GraphQL file
7. **Fix linting**: Cursor will automatically run `bun lint:fix` to auto-fix linting issues when you save a GraphQL file

## Scalar Implementation Definition
- Use scalar when the query or mutation use a Value object: **union type**, **brand type** with `brand-ts` (ie: `Brand<string, 'PaymentId'>`)
- When implementing Scalar use validator (should always be implemented) like define in template
- If you add new scalar you **MUST** add path in `back/codegen.yml` in `scalars` section and `front/nuxt.config.ts` in `scalars` section.

### Brand type
```typescript
// types.ts
import type { Brand } from 'ts-brand'

export type WalletId = Brand<string, 'WalletId'>
```

```typescript
// graphql/typdefs.ts
export default `#graphql 
scalar WalletId
`
```

```typescript
// graphql/resolvers.ts
import { WalletId } from '../validators'
import type { Resolvers } from '../../api/__generated__/types'

const WalletIdScalar = new GraphQLScalarType({
    name: 'WalletId',
    description: 'The `WalletId` scalar type represents a wallet identifier as a string.',
    parseValue: (value: unknown): WalletIdType => WalletId(value),
    serialize: (value: unknown) => WalletId(value),
    parseLiteral: (ast) => (ast.kind === Kind.STRING ? WalletId(ast.value) : null),
})
export const resolvers: Resolvers = {
    WalletId: WalletIdScalar,
}
```

### Union type
```typescript
// types.ts
import type { Brand } from 'ts-brand'

export type Category = 'run' | 'time' | 'score'
```

```typescript
// graphql/typdefs.ts
export default `#graphql
scalar Category
`
```

```typescript
// graphql/resolvers.ts
import { Category } from '../validators'
import type { Resolvers } from '../../api/__generated__/types'

const CategoryScalar = new GraphQLScalarType({
    name: 'Category',
    description: 'The `Category` scalar type represents product categories: run, time, or score.',
    parseValue: (value: unknown) => Category(value),
    serialize: (value: unknown) => value,
    parseLiteral: (ast) => (ast.kind === Kind.STRING ? Category(ast.value) : null),
})
```
## Record type Implementation Definition
- When using record type always use your scalar or primitive
- Always use `!` for required field when inside `types.ts` the property is not optional, you can avoid using `!` when the property is optional or null or undefined

```typescript
export default `#graphql
scalar ProductId
scalar Period
scalar Category

type Product {
  id: ProductId!
  name: String!
  description: String!
  category: Category!
  amount: TelegramStar!
  period: Period!
  quantity: Quantity!
}
`
```
## Query Implementation Definition
- When using query always use a type with name `{DOMAIN_NAME}Query` 
- Inside of `{DOMAIN_NAME}Query` add your query/queries 
- Define inside `Query` type like `{DOMAIN_NAME}: {DOMAIN_NAME}Query!`
- In resolvers, implement `{DOMAIN_NAME}Query` by calling function from `query.ts` file
- In resolvers, implement an empty function for `Query` type and add `// @ts-ignore`
```typescript
// graphql/typdefs.ts
export default `#graphql
type ShopQuery {
  products: [Product!]!
}

type Query {
  shop: ShopQuery!
}
`
```

```typescript
// graphql/resolvers.ts
import type { Resolvers } from '../../api/__generated__/types'
import { ShopQuery } from '../query'

export const resolvers: Resolvers = {
    ShopQuery: {
        products: () => ShopQuery.getProducts(),
    },
    Query: {
        // @ts-ignore
        shop: () => ({}),
    },
}
```

## Mutation Implementation Definition
Same as Query but with Mutation and call function from `command.ts` file
- Implement a subtype for the mutation with the name `{DOMAIN_NAME}Mutation`

```typescript
// graphql/typdefs.ts
export default `#graphql
type ShopMutation {
  createInvoice(productId: ProductId!): Url!
}

type Mutation {
  shop: ShopMutation!
}
`
```

```typescript
// graphql/resolvers.ts
import type { Resolvers } from '../../api/__generated__/types'
import { ShopQuery } from '../query'

export const resolvers: Resolvers = {
    ShopMutation: {
        createInvoice: (_, { productId }, { context: { $firestore, $telegramBot }, user: { id } }) =>
            ShopCommand.createInvoice($firestore, $telegramBot)(id, productId),
    },
    Mutation: {
        // @ts-ignore
        shop: () => ({}),
    },
}
```


Following these guidelines ensures validators remain clear, maintainable, and aligned with best DDD practices.
